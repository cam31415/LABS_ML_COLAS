#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 20 08:10:15 2023

@author: camilla
"""

from sklearn.datasets import load_iris
iris=load_iris()
iris.feature_names
#print(iris.feature_names)
#print(iris.data[0:5,:])
#print(iris.target[0:5])
#print(iris.data)


from sklearn.model_selection import train_test_split
X=iris.data[iris.target!=2,0:2]
y=iris.target[iris.target!=2]
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)
print(X_train.shape)
print(X_test.shape)

#train and test the SVM classifier 
from sklearn.svm import SVC
SVMmodel=SVC(kernel='linear')
SVMmodel.fit(X_train,y_train)
SVMmodel.get_params()
print(SVMmodel.score(X_test,y_test))

#print(iris.data[:,:2])
#print(iris.data[:,1])
#print(iris.target[0:2])

supvectors=SVMmodel.support_vectors_

import matplotlib.pyplot as plt
plt.scatter(X[y==0,0],X[y==0,1],color='green')
plt.scatter(X[y==1,0],X[y==1,1],color='blue')
plt.scatter(supvectors[1,0],supvectors[1,1],color='red',marker='+',s=50)




print(supvectors.shape)
print(X_train.shape)
print(y_train.shape)
#Separating line coefficients:
W=SVMmodel.coef_
b=SVMmodel.intercept_
import numpy as np
xgr=np.linspace(min(X[:,0]),max(X[:,0]),100)
                
print(W[:,0])
print(W[:,1])
print(b)
ygr=-W[:,0]/W[:,1]*xgr-b/W[:,1]
plt.scatter(xgr,ygr)



from sklearn.svm import OneClassSVM
from sklearn.datasets import make_blobs
from numpy import quantile, where, random

random.seed(11)
x, _ = make_blobs(n_samples=300, centers=1, cluster_std=.3, center_box=(4, 4))

plt.scatter(x[:,0], x[:,1])
plt.show()
